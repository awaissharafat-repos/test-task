@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Parse CSV";
}

<div class="row column_title">
    <div class="col-md-12">
        <div class="page_title">
            <span class="h4">@ViewData["Title"]</span>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <form asp-action="UploadCsv" asp-controller="ParseCSV" method="post" enctype="multipart/form-data">
            @* <input type="file" name="file" accept=".csv" required /> *@
            <div id="dropArea" style="border: 2px dashed #ccc; padding: 30px; text-align: center;">
                <p>Drag and drop file here or click to select file.</p>
                <input type="file" name="file" id="fileInput" accept=".csv" style="display:none;" />
            </div>

            <div id="result" class="mt-3"></div>

            <hr />
            <button class="btn btn-success float-right" type="submit"> <i class="fa fa-repeat"></i> Start Parsing</button>
        </form>
    </div>
</div>

@if (ViewBag.JsonResult != null)
{
    <div class="card mt-3">
        <div class="card-body">
            <h5>Parsed JSON:</h5>
            <pre>@Html.Raw(ViewBag.JsonResult)</pre> <!-- Displaying JSON -->
        </div>
    </div>
}



<script>
    const dropArea = document.getElementById('dropArea');
    const fileInput = document.getElementById('fileInput');
    const resultDiv = document.getElementById('result');

    // Prevent default behavior (Prevent file from being opened)
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    // Handle click to open file dialog
    dropArea.addEventListener('click', () => fileInput.click());

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
    }

    function handleFiles(files) {
        if (files.length > 1) {
            alert("Please upload only one file.");
            return; // Prevent multiple files
        }
        if (files.length === 0) return; // No files dropped

        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(files[0]); // Only add the first file
        fileInput.files = dataTransfer.files; // Assign single file to input
        uploadFiles(dataTransfer.files); // Call upload function
    }

    async function uploadFiles(files) {
        const formData = new FormData();
        formData.append('file', files[0]); // Append only the first file

        const response = await fetch('/FileUpload/UploadFiles', {
            method: 'POST',
            body: formData,
        });

        const result = await response.json();
        resultDiv.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`; // Display result
    }
</script>
